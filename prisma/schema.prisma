generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "driverAdapters"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider   = "postgres"
  url        = env("DATABASE_URL")
  extensions = [postgis(version: "3.3.4")]
}

model Country {
  ID           String  @id
  name         String  @unique
  code         String  @unique
  diallingCode String  @unique
  States       State[]

  @@index([ID, name, code, diallingCode])
}

model Currency {
  ID     String @id
  name   String
  code   String
  number String
}

model State {
  ID        String    @id
  name      String    @unique
  countryID String
  Country   Country   @relation(fields: [countryID], references: [ID], onDelete: Cascade)
  City      City[]
  Address   Address[]

  @@index([ID, name, countryID])
}

model City {
  ID      String @id
  name    String
  stateID String
  State   State  @relation(fields: [stateID], references: [ID], onDelete: Cascade)
}

model Admin {
  ID           String        @id
  email        String        @unique
  passwordHash String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?
  AdminProfile AdminProfile?

  @@index([ID, email])
}

model AdminProfile {
  ID        String    @id
  firstName String
  lastName  String?
  adminID   String?   @unique
  Admin     Admin?    @relation(fields: [adminID], references: [ID], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  @@index([ID, adminID])
}

model PhoneNumber {
  ID           String    @id
  diallingCode String
  phone        String
  formatted    String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  Addresses    Address[]

  @@unique([diallingCode, phone, formatted])
  @@index([ID])
}

model Address {
  ID              String            @id
  addressLine1    String
  addressLine2    String?
  postcode        String
  city            String
  stateID         String
  phoneNumberID   String?
  PhoneNumber     PhoneNumber?      @relation(fields: [phoneNumberID], references: [ID], onDelete: SetNull)
  State           State             @relation(fields: [stateID], references: [ID], onDelete: Cascade)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?
  ConsumerAddress ConsumerAddress[]

  @@index([ID, postcode, stateID, phoneNumberID])
}

model Consumer {
  ID                String            @id
  type              String
  email             String
  passwordHash      String
  Profile           Profile?
  lastLoginAt       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime?
  Preference        Preference?
  ConsumerAddresses ConsumerAddress[]
  MembershipCards   MembershipCard[]

  @@unique([type, email])
  @@index([ID, type, email, createdAt, updatedAt])
}

model ConsumerAddress {
  ID         String    @id
  consumerID String
  Consumer   Consumer  @relation(fields: [consumerID], references: [ID], onDelete: Cascade)
  addressID  String
  Address    Address   @relation(fields: [addressID], references: [ID], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?

  @@index([ID, consumerID, addressID])
}

model Profile {
  ID          String    @id
  firstName   String
  lastName    String?
  nric        String?
  gender      String?
  dateOfBirth DateTime
  consumerID  String    @unique
  Consumer    Consumer  @relation(fields: [consumerID], references: [ID], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?

  @@index([ID, consumerID])
}

model Preference {
  ID                    String   @id
  consumerID            String   @unique
  Consumer              Consumer @relation(fields: [consumerID], references: [ID], onDelete: Cascade)
  appearance            String?
  locale                String   @default("en")
  allowPushNotification Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now()) @updatedAt

  @@index([ID, consumerID, allowPushNotification, createdAt])
}

model Subscription {
  ID        String    @id
  plan      String
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  @@unique([plan])
  @@index([ID, plan])
}

model MembershipCard {
  ID         String   @id
  type       String
  code       String
  consumerID String
  Consumer   Consumer @relation(fields: [consumerID], references: [ID], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@index([ID, type, code])
}

model Organization {
  ID      String                               @id
  name    String
  Outlets Outlet[]
  coords  Unsupported("geometry(Point, 4326)")

  @@index([coords], name: "location_idx", type: Gist)
}

model Outlet {
  ID             String       @id
  name           String
  organizationID String
  Organization   Organization @relation(fields: [organizationID], references: [ID], onDelete: Cascade)

  @@unique([name, organizationID])
}
