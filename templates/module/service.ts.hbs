import { CustomLogger, Logger } from '@/providers/logger.provider.js';
import { {{pascalCase name}} } from '@/servers/{{kebabCase server}}/{{kebabCase name}}/{{kebabCase name}}.interface.js';
import { Prisma } from '@prisma/client';
import {
  {{pascalCase name}}Repository,
  {{pascalCase name}}PublicSelect,
  {{pascalCase name}}WithPublicFields
} from '@/repositories/{{kebabCase name}}.repository.js';
import { Pagination } from '@/utils/pagination.util.js';
import { Service } from 'typedi';

@Service()
export class {{pascalCase name}}Service {
  @Logger()
  private readonly logger: CustomLogger;

  constructor(private readonly {{kebabCase name}}Repository: {{pascalCase name}}Repository) {}

  async create(params: {{pascalCase name}}.Create.Params) {
    const {} = params;

    return this.{{kebabCase name}}Repository.create<{{pascalCase name}}PublicSelect>({
      select: {{pascalCase name}}PublicSelect,
      data: {} as Prisma.{{pascalCase name}}CreateInput,
    });
  }

  async list(params: {{pascalCase name}}.List.Params) {
    const { page, limit, account } = params;

    const AND: Prisma.Enumerable<Prisma.{{pascalCase name}}WhereInput> = [];
    let where: Prisma.{{pascalCase name}}WhereInput = {};
    where = {
      ...where,
      AND,
    };
    const total = await this.{{kebabCase name}}Repository.count({ where });
    const items = await this.{{kebabCase name}}Repository.findMany<{{pascalCase name}}PublicSelect>({
      select: {{pascalCase name}}PublicSelect,
      skip: (page - 1) * limit,
      take: limit,
      where,
    });

    return {
      items,
      pagination: new Pagination({
        page,
        limit,
        total,
      }),
    };
  }

  async findOne(params: {{pascalCase name}}.FindOne.Params) {
    const { ID, account } = params;

    return this.{{kebabCase name}}Repository.findFirst<{{pascalCase name}}PublicSelect>({
      select: {{pascalCase name}}PublicSelect,
      where: {
        ID,
      },
    });
  }

  async update(params: {{pascalCase name}}.Update.Params) {
    const { ID, account } = params;

    return this.{{kebabCase name}}Repository.update<{{pascalCase name}}PublicSelect>({
      select: {{pascalCase name}}PublicSelect,
      data: {},
      where: {
        ID,
      },
    });
  }

  async delete(params: {{pascalCase name}}.Delete.Params) {
    const { ID, account } = params;
    return this.{{kebabCase name}}Repository.delete({
      where: {
        ID,
      },
    });
  }
}
