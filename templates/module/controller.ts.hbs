import { {{pascalCase name}} } from '@/servers/{{kebabCase server}}/{{kebabCase name}}/{{kebabCase name}}.interface.js';
import { {{pascalCase name}}Service } from '@/servers/{{kebabCase server}}/{{kebabCase name}}/{{kebabCase name}}.service.js';
import {
  Controller,
  Delete,
  Get,
  Next,
  Params,
  Post,
  Put,
  Request,
  Response,
} from '@decorators/express';
import { CustomLogger, Logger } from '@/providers/logger.provider.js';
import {
  ExpressNextFunction,
  ExpressRequest,
  ExpressResponse,
} from '@/interfaces/express.interface.js';
import { HttpStatus } from '@/enums/http-status.enum.js';
import { serializePaginationParams } from '@/utils/pagination.util.js';
import { validate } from '@/utils/class-validator.util.js';

@Controller('/')
export class {{pascalCase name}}Controller {
  @Logger()
  private readonly logger: CustomLogger;

  constructor(private readonly {{camelCase name}}Service: {{pascalCase name}}Service) {}

  @Post('/')
  async create(
    @Request() request: ExpressRequest,
    @Response() response: ExpressResponse,
    @Next() next: ExpressNextFunction
  ) {
    try {
      const body = await validate<{{pascalCase name}}.Create.Dto>(
        {{pascalCase name}}.Create.Dto,
        request.body
      );
      const data = await this.{{camelCase name}}Service.create({
        ...body,
        account: request.session.account,
      });

      return response.status(HttpStatus.Created).json(new {{pascalCase name}}.Response(data));
    } catch (error) {
      this.logger.fatal(error);
      next(error);
    }
  }

  @Get('/')
  async list(
    @Request() request: ExpressRequest,
    @Response() response: ExpressResponse,
    @Next() next: ExpressNextFunction
  ) {
    try {
      const { page, limit } = serializePaginationParams(request);

      const { items, pagination } = await this.{{camelCase name}}Service.list({
        page,
        limit,
        account: request.session.account,
      });

      return response.status(HttpStatus.Ok).json({
        items: items.map((item) => {
          return new {{pascalCase name}}.Response(item);
        }),
        pagination,
      });
    } catch (error) {
      this.logger.fatal(error);
      next(error);
    }
  }

  @Get('/:ID')
  async get(
    @Params('ID') ID: string,
    @Request() request: ExpressRequest,
    @Response() response: ExpressResponse,
    @Next() next: ExpressNextFunction
  ) {
    try {
      const data = await this.{{camelCase name}}Service.findOne({
        ID,
        account: request.session.account,
      });

      return response.status(HttpStatus.Ok).json(new {{pascalCase name}}.Response(data));
    } catch (error) {
      this.logger.fatal(error);
      next(error);
    }
  }

  @Put('/:ID')
  async update(
    @Params('ID') ID: string,
    @Request() request: ExpressRequest,
    @Response() response: ExpressResponse,
    @Next() next: ExpressNextFunction
  ) {
    try {
      const body = await validate<{{pascalCase name}}.Update.Dto>(
        {{pascalCase name}}.Update.Dto,
        request.body
      );

      const data = await this.{{camelCase name}}Service.update({
        ...body,
        ID,
        account: request.session.account,
      });

      return response.status(HttpStatus.Ok).json(new {{pascalCase name}}.Response(data));
    } catch (error) {
      this.logger.fatal(error);
      next(error);
    }
  }

  @Delete('/:ID')
  async delete(
    @Params('ID') ID: string,
    @Request() request: ExpressRequest,
    @Response() response: ExpressResponse,
    @Next() next: ExpressNextFunction
  ) {
    try {
      await this.{{camelCase name}}Service.delete({
        ID,
        account: request.session.account,
      });

      return response.sendStatus(HttpStatus.NoContent);
    } catch (error) {
      this.logger.fatal(error);
      next(error);
    }
  }
}
